!function(n){var c={};function l(e){if(c[e])return c[e].exports;var r=c[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=n,l.c=c,l.d=function(n,c,e){l.o(n,c)||Object.defineProperty(n,c,{enumerable:!0,get:e})},l.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},l.t=function(n,c){if(1&c&&(n=l(n)),8&c)return n;if(4&c&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(l.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&c&&"string"!=typeof n)for(var r in n)l.d(e,r,function(c){return n[c]}.bind(null,r));return e},l.n=function(n){var c=n&&n.__esModule?function(){return n.default}:function(){return n};return l.d(c,"a",c),c},l.o=function(n,c){return Object.prototype.hasOwnProperty.call(n,c)},l.p="",l(l.s=0)}([function(module,exports,__webpack_require__){"use strict";eval('\r\n\r\nconst body = document.body;\r\nconst banner = document.querySelector(".banner");\r\nconst nav = document.querySelector(".nav");\r\nconst navHamburger = document.querySelector(".nav__hamburger");\r\nconst navMenu = document.querySelector(".nav__menu");\r\nlet navLinks = document.querySelectorAll(".navigation__link");\r\nconst scrollUp = "scroll-up";\r\nconst scrollDown = "scroll-down";\r\nlet bannerWidth;\r\nlet lastScroll = 0;\r\n\r\n//navigation width\r\nfunction setNavWidth() {\r\n  bannerWidth = banner.offsetWidth;\r\n  nav.style.width = bannerWidth + "px";\r\n}\r\nwindow.onload = function () {\r\n  setNavWidth();\r\n};\r\nwindow.onresize = function () {\r\n  setNavWidth();\r\n};\r\n\r\n//navigation revealing or hiding depanding on scroll direction\r\nwindow.addEventListener("scroll", () => {\r\n  const currentScroll = window.pageYOffset;\r\n  if (currentScroll == 0) {\r\n    body.classList.remove(scrollUp);\r\n    return;\r\n  }\r\n  if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {\r\n    //down\r\n    body.classList.remove(scrollUp);\r\n    body.classList.add(scrollDown);\r\n  } else if (\r\n    currentScroll < lastScroll &&\r\n    body.classList.contains(scrollDown)\r\n  ) {\r\n    //up\r\n    body.classList.remove(scrollDown);\r\n    body.classList.add(scrollUp);\r\n  }\r\n  lastScroll = currentScroll;\r\n});\r\n\r\n//look of hamburger menu after slightly scrolling down\r\nfunction changeHamburger() {\r\n  const mq835 = window.matchMedia("(max-width: 835px)");\r\n  const scrolledDown = window.pageYOffset;\r\n\r\n  if (mq835.matches && scrolledDown > 40) {\r\n    navHamburger.classList.add("btn-menu_scrolled");\r\n  } else if (!mq835.matches && scrolledDown > 100) {\r\n    navHamburger.classList.add("btn-menu_scrolled");\r\n  } else {\r\n    navHamburger.classList.remove("btn-menu_scrolled");\r\n  }\r\n}\r\nwindow.addEventListener("scroll", changeHamburger);\r\n\r\n//navigation - hamburger menu changes on cross and menu appears\r\nnavHamburger.addEventListener("click", function () {\r\n  const isOpened = navHamburger.getAttribute("aria-expanded") === "true";\r\n\r\n  navHamburger.classList.toggle("btn-menu_open", !isOpened);\r\n  navHamburger.setAttribute("aria-expanded", String(!isOpened));\r\n  navMenu.classList.toggle("nav__menu_open", !isOpened);\r\n});\r\n\r\n//menu closes after clicking one of the links\r\nfor (let i = 0; i < navLinks.length; i++) {\r\n  navLinks[i].addEventListener("click", function () {\r\n    navMenu.classList.toggle("nav__menu_open");\r\n    navHamburger.classList.toggle("btn-menu_open");\r\n    navHamburger.setAttribute("aria-expanded", "false");\r\n  });\r\n}\r\n\r\n//animation on scroll - skills-slide sections - only the first\r\nconst slide = document.querySelector(".slide--js");\r\n\r\nif (\r\n  "IntersectionObserver" in window &&\r\n  "IntersectionObserverEntry" in window &&\r\n  "intersectionRatio" in window.IntersectionObserverEntry.prototype\r\n) {\r\n  const observer = new IntersectionObserver((entries) => {\r\n    if (entries[0].boundingClientRect.y < 0) {\r\n      slide.classList.add("slide-emerge");\r\n    } else {\r\n      slide.classList.remove("slide-emerge");\r\n    }\r\n  });\r\n  observer.observe(document.querySelector("#pixel-anchor"));\r\n}\r\n\r\n//section experience - elements appear on scroll\r\nconst sliders = document.querySelectorAll(".experience__content");\r\n\r\nconst slideOptions = {\r\n  rootMargin: "-50px",\r\n};\r\n\r\nconst appearOnScroll = new IntersectionObserver(function (\r\n  entries,\r\n  appearOnScroll\r\n) {\r\n  entries.forEach((entry) => {\r\n    if (!entry.isIntersecting) {\r\n      return;\r\n    } else {\r\n      entry.target.firstElementChild.classList.add("appear");\r\n      appearOnScroll.unobserve(entry.target);\r\n    }\r\n  });\r\n},\r\nslideOptions);\r\n\r\nsliders.forEach((slider) => {\r\n  appearOnScroll.observe(slider);\r\n});\r\n\r\n//gallery - we can use it many times on a page\r\nfunction Gallery(gallery) {\r\n  if (!gallery) {\r\n    throw new Error("no gallery found!");\r\n  }\r\n  const images = Array.from(gallery.querySelectorAll("img"));\r\n  const modal = document.querySelector(".modal");\r\n  const prevButton = document.querySelector(".prev");\r\n  const nextButton = document.querySelector(".next");\r\n  const closeButton = document.querySelector(".closeButton");\r\n  let currentImage;\r\n\r\n  function openModal() {\r\n    console.info("opening modal");\r\n    if (modal.matches(".open")) {\r\n      console.info("modal open");\r\n      return;\r\n    }\r\n    modal.classList.add("open");\r\n    //event listeners to be bound when we open the modal:\r\n    window.addEventListener("keyup", handleKeyUp);\r\n    nextButton.addEventListener("click", showNextImage);\r\n    prevButton.addEventListener("click", showPrevImage);\r\n    closeButton.addEventListener("click", closeModal);\r\n  }\r\n\r\n  function closeModal() {\r\n    modal.classList.remove("open");\r\n    //event listeners to be removed when we close the modal:\r\n    window.removeEventListener("keyup", handleKeyUp);\r\n    nextButton.removeEventListener("click", showNextImage);\r\n    prevButton.removeEventListener("click", showPrevImage);\r\n    closeButton.removeEventListener("click", closeModal);\r\n  }\r\n\r\n  function handleClickOutside(e) {\r\n    if (e.target === e.currentTarget) {\r\n      //if the thing that we clicked is the same that we are actually listening for = outside (not anything inside it)\r\n      closeModal();\r\n    }\r\n  }\r\n\r\n  function handleKeyUp(e) {\r\n    if (e.key === "Escape") return closeModal(); //one liner\r\n    if (e.key === "ArrowRight") return showNextImage();\r\n    if (e.key === "ArrowLeft") return showPrevImage();\r\n    //return - if sb clicks escape we dont need to check arrows...\r\n  }\r\n\r\n  function showNextImage() {\r\n    showImage(currentImage.nextElementSibling || gallery.firstElementChild);\r\n  }\r\n\r\n  function showPrevImage() {\r\n    showImage(currentImage.previousElementSibling || gallery.lastElementChild);\r\n  }\r\n\r\n  function showImage(el) {\r\n    if (!el) {\r\n      console.info("no image to show");\r\n      return;\r\n    }\r\n    //update modal with info\r\n    modal.querySelector("img").src = el.src;\r\n    modal.querySelector("h4").textContent = el.title;\r\n    modal.querySelector("figure p").textContent = el.dataset.description;\r\n    currentImage = el;\r\n    openModal();\r\n  }\r\n\r\n  images.forEach((image) =>\r\n    image.addEventListener("click", (e) => showImage(e.currentTarget))\r\n  );\r\n\r\n  images.forEach((image) => {\r\n    image.addEventListener("keyup", (e) => {\r\n      if (e.key === "Enter") {\r\n        showNextImage(e.currentTarget);\r\n      }\r\n    });\r\n  });\r\n\r\n  modal.addEventListener("click", handleClickOutside);\r\n}\r\n\r\n//pobieramy konkretną galerię i dla niej odpalamy funkcję Gallery!\r\nconst gallery1 = Gallery(document.querySelector(".gallery-1"));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);